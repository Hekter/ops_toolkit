package derp

import (
	"errors"
	"net/http"
	"regexp"
	"text/template"
)

var templates = template.Must(template.ParseFiles("templates/zip.html"))

var validPath = regexp.MustCompile("^/(zip)/([a-zA-Z0-9]+)$")

// Page herp derp
type Page struct {
	Title string
}

func getTitle(w http.ResponseWriter, r *http.Request) (string, error) {
	m := validPath.FindStringSubmatch(r.URL.Path)
	if m == nil {
		http.NotFound(w, r)
		return "", errors.New("Invalid Page Title")
	}
	return m[2], nil // The title is the second subexpression.
}

func renderTemplate(w http.ResponseWriter, tmpl string, p *Page) {
	err := templates.ExecuteTemplate(w, tmpl+".html", p)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
	}
}

func viewHandler(w http.ResponseWriter, r *http.Request, title string) {
	p := &Page{Title: "TESTING"} // I know this is wrong but it works for the love of god.
	if title == "zip" {
		p = &Page{Title: "Zip Code API Endpoint"}
	} else {
		p = &Page{Title: "You shouldn't be here >:|"}
	}
	renderTemplate(w, title, p)
}

func makeHandler(fn func(http.ResponseWriter, *http.Request, string)) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		m := validPath.FindStringSubmatch(r.URL.Path)
		if m == nil {
			http.NotFound(w, r)
			return
		}
		fn(w, r, m[2])
	}
}

func zipSubmitHandler(w http.ResponseWriter, r *http.Request, title string) {
	return
}

func main() {
	http.HandleFunc("/zip/", makeHandler(zipHandler))
	http.HandleFunc("/zip/submit/", makeHandler(zipSubmitHandler))
	http.ListenAndServe(":8080", nil)
}
